# 2번
x = as.numeric(x, ascending=T) ; x
# 3번
x = as.logical(x) ; x
# 4번
y <- seq(0,30,10) ; y
# 6번
z <- rep(c(TRUE, FALSE), each=10)
# 6번
z <- rep(c(TRUE, FALSE), each=10) ; z
# 6번
z <- rep(c(TRUE, FALSE), time=10) ; z
# 6번
z <- rep(c(TRUE, FALSE), time=5) ; z
# Repeat() : 같은 수를 반복하여 생성성
rep(c(1,2), times=3)
rep(c(1,2),3)
rep(c(1,2), each=3)
# 2번
x = as.numeric(x, ascending=T) ; x
# 5번
x < y & x <= y
# 5번
(x < y) & (x <= y)
# 벡터(Vector)
c() ; logical() ; numeric() ; character()
# 벡터(Vector)
c() ; logical() ; numeric() ; character()
vec <- vector() ; vec
vec2 = numeric() ; vec2
vec2[1:3] = letters[1:3]
vec3 = logical() ; vec3[1] = T ;
vec3 = logical() ; vec3[1] = T;
vec3[2] = 1; vec3
is.logical(vec3) ; is.numeric(vec3)
vec4 = charater() ; vec4[1] = 1; vec4
vec4 = character() ; vec4[1] = 1; vec4
vec5 = c(); vec5[10] = "a"; vec5
vec3 = logical(); vec3[1] = T;
vec3 = logical(); vec3[1] = T; vec3
vec3[2] = 1; vec3
is.logical(vec3); is.numeric(vec3); vec3
vec4 = character(); vec4[1] = 1; vec4
vec5 = c(); vec5[10] = "a"; vec5
x = c(); x = c(x,2); x
x = c(x, c(3,4)); x
vec2 = letters[1:3]; vec2
names(vec2)
names(vec2) <- c("first", "second", "third"); vec2
vec2[1]; vec2; vec2["first"]
names(vec2)[2] = '2nd'; vec2
vec3 = c(3,5,2); names(vec3) = c(2,4,1); vec3
vec3[2]; vec3["2"]
is.null(NULL); is.null(1); letters; LETTERS
vec3[2]
vec3["2"]
vec3 = c(3,5,2); names(vec3) = c(2,4,1); vec3
vec3[2]
vec3["2"]
# matrix
x1 <- matrix(1:10, nrows=5, ncols=2, byrow=T); x1
# matrix
x1 <- matrix(1:10, nrow=5, ncol=2, byrow = T); x1
x2 <- matrix(1:10, 5, 2, byrow = F); x2
cbind(x1, x2)
x2[1,2]; x2[2:4, 2]
x2[1,]; x2[,2]
x2[-1,]; x2[,-1]
cbind(x1, x2[1,])
cbind(x1, matrix(x2[1,], 1, 2))
rbind(x1, x2)
as.numeric(x1)
x2[-1,]; x2[,-1]
x2[-1,]; x2[,-1]
cbind(x1, x2[1,])
# matrix
x1 <- matrix(1:10, nrow=5, ncol=2, byrow = T); x1
x2 <- matrix(1:10, 5, 2, byrow = F); x2
x2[1,2]; x2[2:4, 2]
x2[1,]; x2[,2]
x2[-1,]; x2[,-1]
cbind(x1, x2[1,])
cbind(x1, matrix(x2[1,], 1, 2))
cbind(x1, x2[1,])
cbind(x1, matrix(x2[1,], 1, 2)) #
as.numeric(x1)
# matrix의 행과 열의 이름 부여
A <- matrix(1:12, 4, 3)
# matrix의 행과 열의 이름 부여
A <- matrix(1:12, 4, 3); A
rownames(A) <- c("n1", "n2", "n3", "n4")
colnames(A) <- c("x1", "x2", "x3");A
paste0("x", 1:3) # paste0는 공백 없이 붙임
rname <- c("n1", "n2", "n3", "n4")
cname <- c("x1", "x2", "x3")
B <- matrix(:12, 4, 3, dimnames=list(rname, cname)); B
B <- matrix(1:12, 4, 3, dimnames=list(rname, cname)); B
# 행렬의 원소 선택
A <- matrix(1:12, 4, 3, byrow=T); B <- matrix(1,4,3)
A[7]; A[11]
A + B; A - B
t(A)
A <- matrix(1:6,2,3); B <- matrix(1,3,2)
A + B
B%*%A
A&*&t(B)
A%*%t(B)
A <- matrix(c(1,1,1,4),2,2); A
solve(A)
solve(A)%*%A
A <- matrix(c(1,1,1,4),2,2)
sum(diag(A))
det(A)
diag(A)
diag(3); diag(c(1,3,5))
x <- c(1,2,3)
y <- c(1,2,3)
sum(x*y)
x %o% y
diag(A) = c(1,2); A
diag(A) = 1
diag(A) = 1; A
diag(A) = 1; A
# 리스트(list)
a = c(1,3)
b = letters[1:10]
# 리스트(list)
a = c(1,3); a
b = letters[1:10]; b
c = matrix("A",3,4)
c = matrix("A",3,4); c
x = list(a,b,c); x
x&y1; x$y2
x$y1; x$y2
names(x)
x[[1]]
x[1]
x = list(y1=a, y2=b, y3=c); x
x$y1; x$y2
name(x)
names(x)
x[[1]]
list1 = list(a=1:10, b=matrix(1:4,2,2))
list1 = list(a=1:10, b=matrix(1:4,2,2)); list1
list2 <- list()
list2 <- list(); list2
list2[[1]] <- matrix(1:10,5,2)
list2[[1]] <- matrix(1:10,5,2);list2
list2[[2]] <- list1; list2
list1[[2]][1,2] = 10; list1
unlist(list1)
list1$a; list1$b
list1$a
list1$b
list1['a']
list1[['a']]
list1[1]
list1[[1]]; list2[[1]]
# 데이터프레임(dataframe)
x1 = 1:4; x2 <- c("Kim", "Lee", "Jung", "Park"); x1
# 데이터프레임(dataframe)
x1 = 1:4; x1
x2 <- c("Kim", "Lee", "Jung", "Park"); x2
dat = data.frame(x1,x2); dat
dat2 = data.frame(num=x1, name=x2); dat2
dat[, c("x1","x2")]
dat2$num
dat2$name
dat2[1,2]
dat2[,2]
# 요인(factor)
grade = c("A", "A", "B", "C", "B", "B"); grade
f_grade = factor(grade); f_grade
as.numeric(grade)
as.numeric(f_grade)
f2_grade <- factor(grade, order=T); f2_grade
lev <- c("C", "B", "A")
f3_grade <- factor(grade, levels=lev, order=T); f3_grade
levels(f2_grade)
levels(f3_grade)
grade <- c(4.23, 2.5, 7.2, "A", 3.23, 2.2)
as.numeric(grade)
f_grade = factor(grade)
f_grade = factor(grade); f_grade
as.numeric(f_grade)
x1 = 1:4; x2 <- c("Kim", "Lee", "Jung", "Park")
dat = data.frame(x1, x2, stringsAsFactors=T); dat
dat[,1]; dat[,2]
dat[,1]
dat[,2]
dat[1,]
dat[2,]
dat[1]
dat[2]
dat[[1]]
dat[[2]]
# array
x1 = array(1:24, dim=c(4,3,2)); x1
x2 = array(1:24, dim=c(2,2,4,2)); x2
# 객체 사이의 변환
x <- 1:100; sum1 <- sum(x[13:100])
# 객체 사이의 변환
x <- 1:100; x
sum1 <- sum(x[13:100]); sum1
# 객체 사이의 변환
x <- 1:100; sum1 <- sum(x[13:100]); sum1
x <- c(1:5, 10:20, 30:45, 2:5, 11:30)
x <- c(1:5, 10:20, 30:45, 2:5, 11:30); x
x>12
sum2 <- sum(x[x>12])
sum3 <- sum(x[x>10 & x<20])
sum2 <- sum(x[x>12]); sum2
sum3 <- sum(x[x>10 & x<20]); sum3
y = rnorm(le7); y # 1* 10^7
y = rnorm(1e7); y # 1* 10^7
s1 = 0
s1
sum(y[y>0.2])
# apply
x_mat <- matrix(rnorm(100),20,5); x_mat
apply(x_mat,2,mean)
apply(x_mat,2,var)
apply(x_mat,1,var)
apply(x_mat,2,quantile,c(0.5,0.u7))
apply(x_mat,2,quantile,c(0.5,0.7))
x_q = quantile(x_mat[,1], c(0.5,0.7)); x_q
x_q = cbind(x_q, quantile(x_mat[,i],c(0.5,0.7)))
for(i in 2:ncol(x_mat)){
x_q = cbind(x_q, quantile(x_mat[,i],c(0.5,0.7)))
}
x_q
x_mat[1,2] = NA; apply(x_mat,2,mean)
mean(c(1,2,NA,3))
mean(c(1,2,NA,3,NA.rm=T))
apply(x_mat, 2,mean,na.rm=T)
mean(c(1,2,NA,3,na.rm=T))
# Practice 3
## 1.
x <- c(-10, 30,10); x
# Practice 3
## 1.
x <- c(-10:30,10); x
# Practice 3
## 1.
x <- c(-10:10,30); x
## 2.
y <- vector("S","T","A","T","S");y
# select 함수
-- ㄹㅇㄹㅇㄹ
# select, mutate
library(deply); search()
# select, mutate
library(dply); search()
# select, mutate
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
select(mtcars, mpg, cyl, wt)
select(mtcars, -hp, -gear) # 강의노트에 있는 mpg 빼야함
mtf = select(mtcars, mpg, am, cyl, hp, wt)
mutate(mtf, hw_rat = hp/wt)
mutate(mtf, hw_rat=hp/wt, cw_rat=cyl/wt)
# arrange
arrange(mtf, mpg, desc(cyl))
arrange(mtf, am, cyl, wt)
summarize(mtcars, m_mpg=mean(mpg), v_mpg=var(mpg))
summarize(mtcars, md_mpg=median(mpg), md_wt=median(wt))
summarise_all(select(mtcars, mpg, cyl, wt), mean)
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd)
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd))
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd))
summarise_all(select(mtcars, mpg, cyl, wt),
list(mean=mean, sd=sd))
# group_by
mt_gr = group_by(mtcars, cyl); mt_gr
# group_by
mt_gr = group_by(mtcars, cyl)
mt_gr
summarize(mt_gr, m_mpg=mean(mpg), m_wt=mean(wt))
summarize(mt_gr, v_mpg=var(mpg), v_wt=var(wt))
summarise_all(mt_gr, list(mean=mean, var=var))
# pipe
dat <- group_by(mtcars, cyl); dat
dat <- select(dat, mpg, wt, cyl); dat
dat <- summarize(dat, m_mpg > 16); dat
dat <- summarize(dat, m_mpg > 16); dat
dat <- summarize(dat, m_mpg=mean(mpg)); dat
dat <- summarize(dat, m_mpg > 16); dat
dat2 <- mtcars %>%
group_by(cyl) %>%
dat2 <- mtcars %>%
group_by(cyl) %>%
select(mpg, wt, cyl) %>%
summarize(m_mpg=mean(mpg)) %>%
filter(m_mpg > 16)
dat2 <- mtcars %>%
group_by(cyl) %>%
select(mpg, wt, cyl) %>%
summarize(m_mpg=mean(mpg)) %>%
filter(m_mpg > 16)
dat2
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2)l is.NA(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2)l is.na(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2); is.na(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2),3,2); is.na(x)
sum(is.na(x)) # number of missing values
which(is.na(x)) # 1차원 위치
which(is.na(x), T) # 2차원 위치
apply(x,2,mean,na.rm=T)
x[which(is.na(x))]
x[which(is.na(x), T)]
x[which(is.na(x))] = 2
x[which(is.na(x))] = 2; x
x <- matrix(c(NA,1.6, 3.5, 3.8, NA, NA, 2.4, 2.3),4,2)
x <- matrix(c(NA,1.6, 3.5, 3.8, NA, NA, 2.4, 2.3),4,2);x
apply(x,2, mean, na.rm=T)
x[which(is,na(x), T)] = c(2.9666, 2.35, 2.35)
x[which(is.na(x), T)] = c(2.9666, 2.35, 2.35)
x[which(is.na(x), T)] = c(2.9666, 2.35, 2.35);x
indx = which(is.na(x), T)
x[indx] = apply(x,2, mean, na.rm=T)[indx[,2]];x
# 조건문
x <- 1:5; y<- -2:2
if(any(x<0)) print(x)
if(any(y>0)) print(abs(y))
if(y<0) print(y)
cat("\n y contains negative values")
if(any(y<0))
{
print(abs(y))
cat("\n y contains negative values")
}
x<-1:5
cat("\n length 5 !=", length(x))
if(length(x)==5)
{
if(sum(x)==15)
cat("\n length=", length(x), ", sum = ", sum(x))
else
{
cat("\n length 5 !=", length(x))
}
}
if(length(x)==5 && sum(x)==15) # 동시 비교 가능
# ifelse function
x = c(10,3,6,9)
y = c(1,5,4,12)
ifelse(x>y, x, y)
score = c(80, 75, 40, 98)
grade = ifelse(score >=50, "pass", "fail")
grade = ifelse(score >=50, "pass", "fail"); grade
data.frame(score, grade)
y <- -2:2
ifelse(y>=0, y, =y)
ifelse(y>=0, y, -y)
abs(y)
x <- c(1,3,2,5,2)
i <- 3
switch(i, mean(x), median(x), sd(x), var(x))
sd(x)
type <- "mean"
y = switch(type, mean=mean(x), sd=sd(x), var=var(x)))
y = switch(type, mean=mean(x), sd=sd(x), var=var(x))
y = switch(type, mean=mean(x), sd=sd(x), var=var(x)); y
# Practice 4
## 1. Ex_data.csv로부터 자료를 읽어서 raw_dat으로 저장
getwd()
# Practice 4
## 1. Ex_data.csv로부터 자료를 읽어서 raw_dat으로 저장
path = "C:/Users/sjy54/OneDrive - 인하대학교/Son/12.Github/Inha-Lecture/Statistical-Software-and-Lab/Practice/"
setwd(path)
setwd(path)
# Practice 4
## 1. Ex_data.csv로부터 자료를 읽어서 raw_dat으로 저장
path = "C:/Users/sjy54/OneDrive - 인하대학교/Son/12. Github/Inha-Lecture/Statistical-Software-and-Lab/Practice/"
setwd(path)
## 1. Ex_data.csv로부터 자료를 읽어서 raw_dat으로 저장
raw_dat = read.csv(file='./Ex_data.csv', header=T)
## 1. Ex_data.csv로부터 자료를 읽어서 raw_dat으로 저장
raw_dat = read.csv(file='./Ex_data.csv', header=T)
raw_dat
head(raw_dat)
View(raw_dat)
## 2. head 함수를 사용하여 입력된 raw_dat를 확인하시오.
head(raw_dat)
## 3. raw_dat의 차원을 구하시오.
dim(raw_dat)
## 4. raw_dat의 첫번째 열에서 유전자의 이름을 추출하고 gene_name.txt로 저장하시오.
write.table(raw_dat[, 1])
View(raw_dat)
## 4. raw_dat의 첫번째 열에서 유전자의 이름을 추출하고 gene_name.txt로 저장하시오.
write.table(raw_dat[, 1],file="gene_name.txt", quote=F, sep=","))
## 4. raw_dat의 첫번째 열에서 유전자의 이름을 추출하고 gene_name.txt로 저장하시오.
write.table(raw_dat[, 1],file="gene_name.txt", quote=F, sep=",")
## 5. raw_dat의 3,9,10열의 성분을 선택하여 새로운 변수에 저장하고 sub_data.txt로 저장하시오(구분은 tab)
sub_data = raw_dat[,c(3,9,10)]; sub_data
write.table(sub_data, file="sub_data.txt", sep='\t')
## 6. raw_dat의 31~100번째 행과 21~40 사이의 짝수 열을 선택하여 새로운 변수에 저장하고 sub_data2.csv로 저장하시오(구분 comma)
sub_data2 = raw_dat[31:100, seq(from=22, to=40, by=2)]
write.table(sub_data2, file="sub_data2.csv", row.names=F, col.names=F, sep=',')
## 7. raw_dat에서 결측값의 개수를 세시오
sum(is.na(raw_dat))
## 8. raw_dat에서 결측값의 위치를 1차원 인덱스로 찾으시오.
which(is.na(raw_dat))
## 9. raw_dat에서 결측값의 위치를 2차원 인덱스로 찾으시오.
which(is.na(raw_data), T)
## 9. raw_dat에서 결측값의 위치를 2차원 인덱스로 찾으시오.
which(is.na(raw_dat), T)
## 10. 9번에서 찾은 raw_dat에서 결측값의 위치를 index 변수에 저장하고 이를 활용하여 결측값이 발생한 열의 결측값 제외 평균을
## 계산하여 각 결측값을 대체하시오.(결측값 제외 평균 계산 : mean(x, na.rm=T) 사용)
index = which(is.na(raw_dat), T)
for (i in 1:nrow(index))
raw_dat[index[i,1], index[i,2]] == mean(raw_dat[, index[i,2]], na.rm=T)
sum(is.na(raw_dat))
for (i in 1:nrow(index))
raw_dat[index[i,1], index[i,2]] = mean(raw_dat[, index[i,2]], na.rm=T)
sum(is.na(raw_dat))
path = "C:/Users/sjy54/OneDrive - 인하대학교/Son/12. Github/Inha-Lecture/Statistical-Software-and-Lab/Practice/"
setwd(path)
# Practice 5
x = runif(10)
## 1. 조건문을 사용하여 x의 원소의 합이 5보다 클 경우 "sum(x) is greater than 5"를, 5보다 작을 경우에는
## "sum(x) is less than 5", 같을 경우에는 "sum(x) is equal to 5"를 출력하는 코드를 작성하시오.
sum(x)
## 1. 조건문을 사용하여 x의 원소의 합이 5보다 클 경우 "sum(x) is greater than 5"를, 5보다 작을 경우에는
## "sum(x) is less than 5", 같을 경우에는 "sum(x) is equal to 5"를 출력하는 코드를 작성하시오.
s = sum(x)
if(s > 5) {
print("sum(x) is greater than 5")
else if(s == 5) {
if(s > 5) {
print("sum(x) is greater than 5")
else if(s == 5) {
else if{
if(s > 5) {
print("sum(x) is greater than 5")
else if(s == 5) {
if(s > 5) {
print("sum(x) is greater than 5")
else if(s == 5) {
if(s > 5) {
print("sum(x) is greater than 5")
} else if (s == 5){
print("sum(x) is equal to 5")
} else {
print("sum(x) is less than 5")
}
## 2. 조건문을 사용하여 x의 원소 중 0.5보다 작은 값은 동일한 원소를 갖으며, 0.5보다 크거나 같은 값은 0.3만큼 작은
## 값을 갖는 벡터 y를 정의하시오.
y = ifelse(x < 0.5, x, x - 0.3); ㅛ
## 2. 조건문을 사용하여 x의 원소 중 0.5보다 작은 값은 동일한 원소를 갖으며, 0.5보다 크거나 같은 값은 0.3만큼 작은
## 값을 갖는 벡터 y를 정의하시오.
y = ifelse(x < 0.5, x, x - 0.3); y
## 3. 변수 i를 이용하여 i=1일 때 x+y, i=2일 때 x-y, i=3일 때 x*y를 출력하는 구문을 switch 함수를 이용하여 작성하시오.
i = 3
## 3. 변수 i를 이용하여 i=1일 때 x+y, i=2일 때 x-y, i=3일 때 x*y를 출력하는 구문을 switch 함수를 이용하여 작성하시오.
i = 3
result = switch(i, x + y, x - y, x * y)
print(result)
## 4. 조건문을 사용하여 score가 90 이상이면 A, 75 이상이면 B, 50 이상이면 C, 그 외 다른 값은 D의 값을 출력하는 코드를 작성하시오.
score = 65
## 4. 조건문을 사용하여 score가 90 이상이면 A, 75 이상이면 B, 50 이상이면 C, 그 외 다른 값은 D의 값을 출력하는 코드를 작성하시오.
score = 68
if (score>=90) {
print("A")
}
else if (score >= 75){
else if (score >= 50){
else {
if (score>=90) {
print("A")
} else if (score >= 75){
print("B")
} else if (score >= 50){
print("C")
} else {
print("D")
}
## 5. type 변수에 "sqrt", "square", "log" 중 하나의 값을 할당한다고 할 때, 해당 변수값에 따라서 "sqrt"일 때는 score의
## 제곱근, "square"는 score의 제곱, "log"는 score의 상용로그값을 출력하는 코드를 작성하시오.
type = "log"
if (type == "sqrt") {
print(sqrt(score))
} else if(type == "square") {
print(score^2)
} else {
print(log(score))
}
### switch 함수 활용
result = switch(type, sqrt=sqrt(score), square=score^2, log=log10(score))
print(result)
if (type == "sqrt") {
print(sqrt(score))
} else if(type == "square") {
print(score^2)
} else {
print(log10(score))
}
### switch 함수 활용
result = switch(type, sqrt=sqrt(score), square=score^2, log=log10(score))
print(result)
