cbind(x1, x2[1,])
# matrix
x1 <- matrix(1:10, nrow=5, ncol=2, byrow = T); x1
x2 <- matrix(1:10, 5, 2, byrow = F); x2
x2[1,2]; x2[2:4, 2]
x2[1,]; x2[,2]
x2[-1,]; x2[,-1]
cbind(x1, x2[1,])
cbind(x1, matrix(x2[1,], 1, 2))
cbind(x1, x2[1,])
cbind(x1, matrix(x2[1,], 1, 2)) #
as.numeric(x1)
# matrix의 행과 열의 이름 부여
A <- matrix(1:12, 4, 3)
# matrix의 행과 열의 이름 부여
A <- matrix(1:12, 4, 3); A
rownames(A) <- c("n1", "n2", "n3", "n4")
colnames(A) <- c("x1", "x2", "x3");A
paste0("x", 1:3) # paste0는 공백 없이 붙임
rname <- c("n1", "n2", "n3", "n4")
cname <- c("x1", "x2", "x3")
B <- matrix(:12, 4, 3, dimnames=list(rname, cname)); B
B <- matrix(1:12, 4, 3, dimnames=list(rname, cname)); B
# 행렬의 원소 선택
A <- matrix(1:12, 4, 3, byrow=T); B <- matrix(1,4,3)
A[7]; A[11]
A + B; A - B
t(A)
A <- matrix(1:6,2,3); B <- matrix(1,3,2)
A + B
B%*%A
A&*&t(B)
A%*%t(B)
A <- matrix(c(1,1,1,4),2,2); A
solve(A)
solve(A)%*%A
A <- matrix(c(1,1,1,4),2,2)
sum(diag(A))
det(A)
diag(A)
diag(3); diag(c(1,3,5))
x <- c(1,2,3)
y <- c(1,2,3)
sum(x*y)
x %o% y
diag(A) = c(1,2); A
diag(A) = 1
diag(A) = 1; A
diag(A) = 1; A
# 리스트(list)
a = c(1,3)
b = letters[1:10]
# 리스트(list)
a = c(1,3); a
b = letters[1:10]; b
c = matrix("A",3,4)
c = matrix("A",3,4); c
x = list(a,b,c); x
x&y1; x$y2
x$y1; x$y2
names(x)
x[[1]]
x[1]
x = list(y1=a, y2=b, y3=c); x
x$y1; x$y2
name(x)
names(x)
x[[1]]
list1 = list(a=1:10, b=matrix(1:4,2,2))
list1 = list(a=1:10, b=matrix(1:4,2,2)); list1
list2 <- list()
list2 <- list(); list2
list2[[1]] <- matrix(1:10,5,2)
list2[[1]] <- matrix(1:10,5,2);list2
list2[[2]] <- list1; list2
list1[[2]][1,2] = 10; list1
unlist(list1)
list1$a; list1$b
list1$a
list1$b
list1['a']
list1[['a']]
list1[1]
list1[[1]]; list2[[1]]
# 데이터프레임(dataframe)
x1 = 1:4; x2 <- c("Kim", "Lee", "Jung", "Park"); x1
# 데이터프레임(dataframe)
x1 = 1:4; x1
x2 <- c("Kim", "Lee", "Jung", "Park"); x2
dat = data.frame(x1,x2); dat
dat2 = data.frame(num=x1, name=x2); dat2
dat[, c("x1","x2")]
dat2$num
dat2$name
dat2[1,2]
dat2[,2]
# 요인(factor)
grade = c("A", "A", "B", "C", "B", "B"); grade
f_grade = factor(grade); f_grade
as.numeric(grade)
as.numeric(f_grade)
f2_grade <- factor(grade, order=T); f2_grade
lev <- c("C", "B", "A")
f3_grade <- factor(grade, levels=lev, order=T); f3_grade
levels(f2_grade)
levels(f3_grade)
grade <- c(4.23, 2.5, 7.2, "A", 3.23, 2.2)
as.numeric(grade)
f_grade = factor(grade)
f_grade = factor(grade); f_grade
as.numeric(f_grade)
x1 = 1:4; x2 <- c("Kim", "Lee", "Jung", "Park")
dat = data.frame(x1, x2, stringsAsFactors=T); dat
dat[,1]; dat[,2]
dat[,1]
dat[,2]
dat[1,]
dat[2,]
dat[1]
dat[2]
dat[[1]]
dat[[2]]
# array
x1 = array(1:24, dim=c(4,3,2)); x1
x2 = array(1:24, dim=c(2,2,4,2)); x2
# 객체 사이의 변환
x <- 1:100; sum1 <- sum(x[13:100])
# 객체 사이의 변환
x <- 1:100; x
sum1 <- sum(x[13:100]); sum1
# 객체 사이의 변환
x <- 1:100; sum1 <- sum(x[13:100]); sum1
x <- c(1:5, 10:20, 30:45, 2:5, 11:30)
x <- c(1:5, 10:20, 30:45, 2:5, 11:30); x
x>12
sum2 <- sum(x[x>12])
sum3 <- sum(x[x>10 & x<20])
sum2 <- sum(x[x>12]); sum2
sum3 <- sum(x[x>10 & x<20]); sum3
y = rnorm(le7); y # 1* 10^7
y = rnorm(1e7); y # 1* 10^7
s1 = 0
s1
sum(y[y>0.2])
# apply
x_mat <- matrix(rnorm(100),20,5); x_mat
apply(x_mat,2,mean)
apply(x_mat,2,var)
apply(x_mat,1,var)
apply(x_mat,2,quantile,c(0.5,0.u7))
apply(x_mat,2,quantile,c(0.5,0.7))
x_q = quantile(x_mat[,1], c(0.5,0.7)); x_q
x_q = cbind(x_q, quantile(x_mat[,i],c(0.5,0.7)))
for(i in 2:ncol(x_mat)){
x_q = cbind(x_q, quantile(x_mat[,i],c(0.5,0.7)))
}
x_q
x_mat[1,2] = NA; apply(x_mat,2,mean)
mean(c(1,2,NA,3))
mean(c(1,2,NA,3,NA.rm=T))
apply(x_mat, 2,mean,na.rm=T)
mean(c(1,2,NA,3,na.rm=T))
# Practice 3
## 1.
x <- c(-10, 30,10); x
# Practice 3
## 1.
x <- c(-10:30,10); x
# Practice 3
## 1.
x <- c(-10:10,30); x
## 2.
y <- vector("S","T","A","T","S");y
# select 함수
-- ㄹㅇㄹㅇㄹ
# select, mutate
library(deply); search()
# select, mutate
library(dply); search()
# select, mutate
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
# select, mutate
install.packages("deplyr")
library(dplyr); search()
select(mtcars, mpg, cyl, wt)
select(mtcars, -hp, -gear) # 강의노트에 있는 mpg 빼야함
mtf = select(mtcars, mpg, am, cyl, hp, wt)
mutate(mtf, hw_rat = hp/wt)
mutate(mtf, hw_rat=hp/wt, cw_rat=cyl/wt)
# arrange
arrange(mtf, mpg, desc(cyl))
arrange(mtf, am, cyl, wt)
summarize(mtcars, m_mpg=mean(mpg), v_mpg=var(mpg))
summarize(mtcars, md_mpg=median(mpg), md_wt=median(wt))
summarise_all(select(mtcars, mpg, cyl, wt), mean)
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd)
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd))
summarise_all(select(mtcars, mpg, cyl, wt), list(mean,sd))
summarise_all(select(mtcars, mpg, cyl, wt),
list(mean=mean, sd=sd))
# group_by
mt_gr = group_by(mtcars, cyl); mt_gr
# group_by
mt_gr = group_by(mtcars, cyl)
mt_gr
summarize(mt_gr, m_mpg=mean(mpg), m_wt=mean(wt))
summarize(mt_gr, v_mpg=var(mpg), v_wt=var(wt))
summarise_all(mt_gr, list(mean=mean, var=var))
# pipe
dat <- group_by(mtcars, cyl); dat
dat <- select(dat, mpg, wt, cyl); dat
dat <- summarize(dat, m_mpg > 16); dat
dat <- summarize(dat, m_mpg > 16); dat
dat <- summarize(dat, m_mpg=mean(mpg)); dat
dat <- summarize(dat, m_mpg > 16); dat
dat2 <- mtcars %>%
group_by(cyl) %>%
dat2 <- mtcars %>%
group_by(cyl) %>%
select(mpg, wt, cyl) %>%
summarize(m_mpg=mean(mpg)) %>%
filter(m_mpg > 16)
dat2 <- mtcars %>%
group_by(cyl) %>%
select(mpg, wt, cyl) %>%
summarize(m_mpg=mean(mpg)) %>%
filter(m_mpg > 16)
dat2
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2)l is.NA(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2)l is.na(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2)3,2); is.na(x)
# 결측값 확인
x <- matrix(c(NA,1,3,NA,NA,2),3,2); is.na(x)
sum(is.na(x)) # number of missing values
which(is.na(x)) # 1차원 위치
which(is.na(x), T) # 2차원 위치
apply(x,2,mean,na.rm=T)
x[which(is.na(x))]
x[which(is.na(x), T)]
x[which(is.na(x))] = 2
x[which(is.na(x))] = 2; x
x <- matrix(c(NA,1.6, 3.5, 3.8, NA, NA, 2.4, 2.3),4,2)
x <- matrix(c(NA,1.6, 3.5, 3.8, NA, NA, 2.4, 2.3),4,2);x
apply(x,2, mean, na.rm=T)
x[which(is,na(x), T)] = c(2.9666, 2.35, 2.35)
x[which(is.na(x), T)] = c(2.9666, 2.35, 2.35)
x[which(is.na(x), T)] = c(2.9666, 2.35, 2.35);x
indx = which(is.na(x), T)
x[indx] = apply(x,2, mean, na.rm=T)[indx[,2]];x
# 조건문
x <- 1:5; y<- -2:2
if(any(x<0)) print(x)
if(any(y>0)) print(abs(y))
if(y<0) print(y)
cat("\n y contains negative values")
if(any(y<0))
{
print(abs(y))
cat("\n y contains negative values")
}
x<-1:5
cat("\n length 5 !=", length(x))
if(length(x)==5)
{
if(sum(x)==15)
cat("\n length=", length(x), ", sum = ", sum(x))
else
{
cat("\n length 5 !=", length(x))
}
}
if(length(x)==5 && sum(x)==15) # 동시 비교 가능
# ifelse function
x = c(10,3,6,9)
y = c(1,5,4,12)
ifelse(x>y, x, y)
score = c(80, 75, 40, 98)
grade = ifelse(score >=50, "pass", "fail")
grade = ifelse(score >=50, "pass", "fail"); grade
data.frame(score, grade)
y <- -2:2
ifelse(y>=0, y, =y)
ifelse(y>=0, y, -y)
abs(y)
x <- c(1,3,2,5,2)
i <- 3
switch(i, mean(x), median(x), sd(x), var(x))
sd(x)
type <- "mean"
y = switch(type, mean=mean(x), sd=sd(x), var=var(x)))
y = switch(type, mean=mean(x), sd=sd(x), var=var(x))
y = switch(type, mean=mean(x), sd=sd(x), var=var(x)); y
# 정수형(integer) : R에서는 실수형 자료가 기본. 입력 시 정수형으로 정의 또는 아래의 함수를 정의하여 변환
real <- 3.5
as.integer(real) # 정수로 변경. 실제 변수는 변화 x
intg <- 3
is.integer(1:2)
is.integer(intg) # 해당 자료형인지 확인 -> True/False 출력
intg2 <- as.integer(3)
is.integer(intg2)
# 정수형(integer) : R에서는 실수형 자료가 기본. 입력 시 정수형으로 정의 또는 아래의 함수를 정의하여 변환
real <- 3.5
is.integer(real)
intg <- 3
is.integer(1:2)
is.integer(intg) # 해당 자료형인지 확인 -> True/False 출력
# 실수형(double) : 정수형, 실수형을 합쳐서 numeric
real <- 3
is.double(real)
# 문자형(character)
ch <- c("red", "blue","yellow")
ch[1]
ch[3]
ch[-2] # 두 번째꺼 빼고
ch[7] # NA(Not Available)
ch2 <- c("a","b","c")
ch2 <- c("a","b","c"); ch2
ch2 = c("ab\"",'a\'') # \ : escape 문자(\" : " 문자 그대로)
ch2
cat(ch2) # 실제 출력해봄
?cat
getwd()
setwd('C:/Users/sjy54/OneDrive - 인하대학교/Son/12. Github/Inha-Lecture/Statistical-Software-and-Lab/Lecture_Note/')
getwd()
# R에서 프로그램 실행 소요 시간 측정하기
system.time({
s=0
for(i in 1.1:1e8){
s = s + i
}
})
y <- system.time(sum(1.1:1e8))
y[1]; y[2]; y[3]
y[1]; y[2]; y[3]; y
tic1 = Sys.time()
s=0
for(i in 1.1:1e8){
s = s + i
}
toc1 = Sys.time()
y <- system.time(sum(1.1:1e8))
as.numeric(toc1 - tic1, units='secs')
tic2 = Sys.time()
y <- system.time(sum(1.1:1e8))
toc2 = Sys.time()
as.numeric(toc2 - toc1, units='secs')
tic1 = Sys.time()
s=0
for(i in 1.1:1e8){
s = s + i
}
toc1 = Sys.time()
y <- system.time(sum(1.1:1e8))
as.numeric(toc1 - tic1, units='secs')
tic2 = Sys.time()
y <- system.time(sum(1.1:1e8))
toc2 = Sys.time()
as.numeric(toc2 - toc1, units='secs')
tic1 = Sys.time() # 블럭 잡아서 실행
s=0
for(i in 1.1:1e8){
s = s + i
}
toc1 = Sys.time()
y <- system.time(sum(1.1:1e8))
as.numeric(toc1 - tic1, units='secs')
tic2 = Sys.time()
y <- system.time(sum(1.1:1e8))
toc2 = Sys.time()
as.numeric(toc2 - toc2, units='secs')
tic1 = Sys.time() # 블럭 잡아서 실행
s=0
for(i in 1.1:1e8){
s = s + i
}
toc1 = Sys.time()
y <- system.time(sum(1.1:1e8))
as.numeric(toc1 - tic1, units='secs')
tic2 = Sys.time()
y <- system.time(sum(1.1:1e8))
toc2 = Sys.time()
as.numeric(toc2 - tic2, units='secs')
n_rep = 100
n = 1e6
xm = rep(0, n_rep)
tic1 = Sys.time()
n_rep = 100
n = 1e6
xm = rep(0, n_rep)
tic1 = Sys.time()
for(i in 1:n_rep){
tic2 = Sys.time()
samp = rnorm(n,2,2)
xm[i] = mean(samp)
toc2 = Sys.time()
cat('\n i=', i, 'time', as.numeric(toc2-tic2, units='secs'))
}
n_rep = 10
n = 1e6
xm = rep(0, n_rep)
tic1 = Sys.time()
for(i in 1:n_rep){
tic2 = Sys.time()
samp = rnorm(n,2,2)
xm[i] = mean(samp)
toc2 = Sys.time()
cat('\n i=', i, 'time', as.numeric(toc2-tic2, units='secs'))
}
Sys.time()-tic1
tic <- Sys.time()
s = 0
for(i in 1.1:1e5){
if(i %% 2 == 0 || i %% 3 == 0)
s = s + i
}
toc <- Sys.time(); as.numeric(toc-tic, units='secs')
tic2 <- Sys.time()
tic <- Sys.time()
s = 0
for(i in 1.1:1e5){
if(i %% 2 == 0 || i %% 3 == 0)
s = s + i
}
toc <- Sys.time(); as.numeric(toc-tic, units='secs')
tic2 <- Sys.time()
x <- 1.1:1e5
s2 = sum(x[x%%2==0 | x%%3 ==0])
toc2 <- Sys.time()
as.numeric(toc2-tic2, units='secs')
# 예제
## 1) 문자 벡터를 입력받아서 parsing 작업
## 2) parsing된 문자(단어)들 중 관사(a,an,the) 제외
## 3) 각 단어들의 빈도 계산
## 4) 단어 빈도 계산 결과 반환
x = c('a bat, cat', 'x,y/z')
sep = '/'
temp = gsub("[(),.?!/ ]", sep, x); temp
temp = unlist(strsplit(temp,sep))
xrm = c("", "a", "an", "the")
temp = temp[!(temp %in% xrm)] # temp[temp!=""]
table(tolower(temp))
x = c('a bat, cat', 'x,y/z')
sep = '/'
# temp = gsub("[(),.?!/ ]", sep, x)
temp = unlist(strsplit(x,sep))
# temp = gsub("[(),.?!/ ]", sep, x)
temp = unlist(strsplit(x,sep))
xrm = c("", "a", "an", "the")
temp = temp[!(temp %in% xrm)] # temp[temp!=""]
table(tolower(temp))
wd_cnt = function(x)
{
sep = '/'
# temp = gsub("[(),.?!/ ]", sep, x)
temp = unlist(strsplit(x,sep))
xrm = c("", "a", "an", "the")
temp = temp[!(temp %in% xrm)] # temp[temp!=""]
return(table(tolower(temp)))
}
y = c('a bat, cat', 'x,y/z'); wd_cnt(y)
y = c('a bat, cat', 'x,y/z', "[(),.?!/ ]"); wd_cnt(y)
y = c('a bat, cat', 'x,y/z'); wd_cnt(y, sep)
y = c('a bat, cat'); wd_cnt(y, sep)
wd_cnt = function(x, sep='[/, ]')
{
temp = unlist(strsplit(x,sep))
xrm = c("", "a", "an", "the")
temp = temp[!(temp %in% xrm)] # temp[temp!=""]
return(table(tolower(temp)))
}
y = c('a bat, cat'); wd_cnt(y, sep)
wd_cnt(x=y, sep=',')
y = c('a bat, cat')
wd_cnt(x=y, sep=',')
ftn = function(x)
{
return(x^2)
}
nbox = 10
interval = c(0,5)
d = (b-a)/nbox
a = 0
b = 5
d = (b-a)/nbox
st = seq(a,b-d,by=d)
area = ftn(st)*d
area = ftn(st)*dftn()
area= sum(ftn(st)*d); area
### 2.
area = function(nbox, a, b)
{
return(sum(ftn(st)*d))
}
### 2.
area = function(nbox, a, b)
{
d = (b-a)/nbox
st = seq(a,b-d,by=d)
return(sum(ftn(st)*d))
}
area(10,0,5)
area(15,0,5)
area(1000,0,5)
